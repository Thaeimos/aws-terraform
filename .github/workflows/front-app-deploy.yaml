
name: Deploy to Amazon ECS EC2

on:
  push:
    branches:
      - main
    paths:
      - frontend-app/*

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECS_CLUSTER: ${{ secrets.FRONT_NAME }}
  ECS_TASK_DEFINITION: "frontend-app/frontend_definition.json"
  ECR_REPOSITORY: ${{ secrets.FRONT_NAME }} 
  ECS_SERVICE: ${{ secrets.FRONT_NAME }}               # set this to your Amazon ECS service name
  CONTAINER_NAME: ${{ secrets.FRONT_NAME }}            # set this to the name of the container in the containerDefinitions section of your task definition

jobs:

  setup-stage:
    name: Set environment based on branch
    outputs:
      phase: ${{ steps.env-name.outputs.phase }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup Environment Name
        id: env-name
        run: |
          if [[ "${{github.base_ref}}" == "main" || "${{github.ref}}" == "refs/heads/main" ]]; then
              echo "::set-output name=phase::production"
          else
              echo "::set-output name=phase::development"
          fi

  deploy:
    name: Deploy Frontend to ECS EC2
    needs: setup-stage
    runs-on: ubuntu-latest
    environment: 
      name: ${{needs.setup-stage.outputs.phase}}
      url: http://thaeimos.com/${{needs.setup-stage.outputs.phase}}
    defaults:
      run:
        shell: bash
        working-directory: frontend-app

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.5.1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags 
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Substitute variables and secrets in task definition
        # Use comma in the first sed because of the "/" in the URL
        run: |
          sed -i 's,ECR_URL_PLACEHOLDER,${{ secrets.FRONT_REG_URL }},g' ${{ env.ECS_TASK_DEFINITION }} 
          sed -i 's/REGION_PLACEHOLDER/${{ secrets.AWS_REGION }}/g' ${{ env.ECS_TASK_DEFINITION }}
          sed -i 's/NAME_PLACEHOLDER/${{ secrets.FRONT_NAME }}/g' ${{ env.ECS_TASK_DEFINITION }}

      - name: Debug task definition
        run: |
          cat ${{ env.ECS_TASK_DEFINITION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.1.1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            LOG_LEVEL=info
            ENVIRONMENT=${{needs.setup-stage.outputs.phase}}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.9
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          # wait-for-service-stability: true

      - name: Apply configuration for the ECS service
        run: |
          COUNT=$(jq -r '.desired_count' service.json)
          aws ecs update-service --desired-count $COUNT --cluster frontend-app-ecs-ec2 --service frontend-app-ecs-ec2  --deployment-configuration "maximumPercent=150,minimumHealthyPercent=100"